// ============================================================================
//   Ver  :| Author					:| Mod. Date :| Changes Made:
//   V1.1 :| Alexandra Du			:| 06/01/2016:| Added Verilog file
// ============================================================================


//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

`define ENABLE_ADC_CLOCK
`define ENABLE_CLOCK1
`define ENABLE_CLOCK2
`define ENABLE_SDRAM
`define ENABLE_HEX0
`define ENABLE_HEX1
`define ENABLE_HEX2
`define ENABLE_HEX3
`define ENABLE_HEX4
`define ENABLE_HEX5
`define ENABLE_KEY
`define ENABLE_LED
`define ENABLE_SW
`define ENABLE_VGA
`define ENABLE_ACCELEROMETER
`define ENABLE_ARDUINO
`define ENABLE_GPIO

module DE10_LITE_Golden_Top(

	//////////// ADC CLOCK: 3.3-V LVTTL //////////
`ifdef ENABLE_ADC_CLOCK
	input 		          		ADC_CLK_10,
`endif
	//////////// CLOCK 1: 3.3-V LVTTL //////////
`ifdef ENABLE_CLOCK1
	input 		          		MAX10_CLK1_50,
`endif
	//////////// CLOCK 2: 3.3-V LVTTL //////////
`ifdef ENABLE_CLOCK2
	input 		          		MAX10_CLK2_50,
`endif

	//////////// SDRAM: 3.3-V LVTTL //////////
`ifdef ENABLE_SDRAM
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,
`endif

	//////////// SEG7: 3.3-V LVTTL //////////
`ifdef ENABLE_HEX0
	output		     [7:0]		HEX0,
`endif
`ifdef ENABLE_HEX1
	output		     [7:0]		HEX1,
`endif
`ifdef ENABLE_HEX2
	output		     [7:0]		HEX2,
`endif
`ifdef ENABLE_HEX3
	output		     [7:0]		HEX3,
`endif
`ifdef ENABLE_HEX4
	output		     [7:0]		HEX4,
`endif
`ifdef ENABLE_HEX5
	output		     [7:0]		HEX5,
`endif

	//////////// KEY: 3.3 V SCHMITT TRIGGER //////////
`ifdef ENABLE_KEY
	input 		     [1:0]		KEY,
`endif

	//////////// LED: 3.3-V LVTTL //////////
`ifdef ENABLE_LED
	output		     [9:0]		LEDR,
`endif

	//////////// SW: 3.3-V LVTTL //////////
`ifdef ENABLE_SW
	input 		     [9:0]		SW,
`endif

	//////////// VGA: 3.3-V LVTTL //////////
`ifdef ENABLE_VGA
	output		     [3:0]		VGA_B,
	output		     [3:0]		VGA_G,
	output		          		VGA_HS,
	output		     [3:0]		VGA_R,
	output		          		VGA_VS,
`endif

	//////////// Accelerometer: 3.3-V LVTTL //////////
`ifdef ENABLE_ACCELEROMETER
	output		          		GSENSOR_CS_N,
	input 		     [2:1]		GSENSOR_INT,
	output		          		GSENSOR_SCLK,
	inout 		          		GSENSOR_SDI,
	inout 		          		GSENSOR_SDO,
`endif

	//////////// Arduino: 3.3-V LVTTL //////////
`ifdef ENABLE_ARDUINO
	inout 		    [15:0]		ARDUINO_IO,
	inout 		          		ARDUINO_RESET_N,
`endif

	//////////// GPIO, GPIO connect to GPIO Default: 3.3-V LVTTL //////////
`ifdef ENABLE_GPIO
	inout 		    [35:0]		GPIO
`endif
);



//=======================================================
//  REG/WIRE declarations
//=======================================================
    wire [2:0] state_leds;
    wire       state_pulse_raw;
    wire       state_pulse_extended;
    wire       clock_enable;
    wire       tick;
    wire       tick_player_y;
    wire       obstacle_enable;

    wire [6:0] player_y;
    wire [6:0] HEX0_w, HEX1_w, HEX2_w, HEX3_w, HEX4_w, HEX5_w;

    wire [3:0] obstacle_pulse;

    wire lane1_ext, lane2_ext, lane3_ext, lane4_ext;

    wire collision_raw;
    wire collision_extended;

//=======================================================
//  Structural coding
//=======================================================
    assign LEDR[2:0] = state_leds;
    assign LEDR[4]   = state_pulse_extended;
    assign LEDR[5]   = tick;

    // Obstacle lane pulses (extended, visible to Arduino)
    assign GPIO[0] = lane1_ext;
    assign GPIO[1] = lane2_ext;
    assign GPIO[2] = lane3_ext;
    assign GPIO[3] = lane4_ext;

    // Other GPIO signals
    assign GPIO[8]  = tick_player_y;        // player Y-movement tick
    assign GPIO[9]  = state_pulse_extended; // FSM state change pulse
    assign GPIO[10] = tick;                 // global 32Hz tick from FSM
    assign GPIO[11] = collision_extended;   // NEW: collision visible pulse

//=======================================================
//  Module Instantiations
//=======================================================

    fsm_state_controller u_fsm (
        .clk               (MAX10_CLK1_50),
        .key1_n            (KEY[1]),
        .key0_n            (KEY[0]),
        .collision_detected(collision_raw),        // NEW
        .state_leds        (state_leds),
        .state_pulse       (state_pulse_raw),
        .clock_enable      (clock_enable),
        .tick              (tick),
        .tick_player_y     (tick_player_y),
        .obstacle_enable   (obstacle_enable),
        .player_y          (player_y),             // NEW
        .HEX0              (HEX0_w),
        .HEX1              (HEX1_w),
        .HEX2              (HEX2_w),
        .HEX3              (HEX3_w),
        .HEX4              (HEX4_w),
        .HEX5              (HEX5_w)
    );

    pulse_extender #(.PULSE_WIDTH(500000)) u_extender (
        .clk          (MAX10_CLK1_50),
        .trigger      (state_pulse_raw),
        .extended_out (state_pulse_extended)
    );

    // Obstacle lane pulse extenders
    pulse_extender #(.PULSE_WIDTH(500000)) u_lane1_ext (
        .clk          (MAX10_CLK1_50),
        .trigger      (obstacle_pulse[0]),
        .extended_out (lane1_ext)
    );

    pulse_extender #(.PULSE_WIDTH(500000)) u_lane2_ext (
        .clk          (MAX10_CLK1_50),
        .trigger      (obstacle_pulse[1]),
        .extended_out (lane2_ext)
    );

    pulse_extender #(.PULSE_WIDTH(500000)) u_lane3_ext (
        .clk          (MAX10_CLK1_50),
        .trigger      (obstacle_pulse[2]),
        .extended_out (lane3_ext)
    );

    pulse_extender #(.PULSE_WIDTH(500000)) u_lane4_ext (
        .clk          (MAX10_CLK1_50),
        .trigger      (obstacle_pulse[3]),
        .extended_out (lane4_ext)
    );

    // NEW: Collision pulse extender
    pulse_extender #(.PULSE_WIDTH(500000)) u_collision_ext (
        .clk          (MAX10_CLK1_50),
        .trigger      (collision_raw),
        .extended_out (collision_extended)
    );

    // Obstacle spawner with collision logic
    obstacle_spawner u_obs (
        .clk               (MAX10_CLK1_50),
        .reset             (state_leds == 3'b001),
        .enable            (obstacle_enable),
        .player_y          (player_y),            // NEW
        .spawn_pulse       (obstacle_pulse),
        .collision_detected(collision_raw)        // NEW
    );

//=======================================================
//  HEX Display Mapping
//=======================================================
    assign HEX0 = HEX0_w;
    assign HEX1 = HEX1_w;
    assign HEX2 = HEX2_w;
    assign HEX3 = HEX3_w;
    assign HEX4 = HEX4_w;
    assign HEX5 = HEX5_w;





endmodule
